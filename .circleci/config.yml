---
version: 2
jobs:
  build:
    working_directory: ~/time-tracker/services/app
    docker:
      - image: circleci/ruby:2.6.4-stretch-node-browsers
        environment:
          PGHOST: localhost
          PGUSER: app
          RAILS_ENV: test
      - image: postgres:9.6
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: time_tracker_test
          POSTGRES_PASSWORD: ''
    steps:
      - checkout:
          path: ~/time-tracker

      # Restore bundle cache
      - restore_cache:
          keys:
            - time-tracker-{{ checksum "Gemfile.lock" }}
            - time-tracker-

      - run:
          name: Install Bundler
          command: gem install bundler

      - run:
          name: Bundle install
          command: bundle install --jobs=4 --retry=3 --path vendor/bundle

      # Store bundle cache
      - save_cache:
          key: time-tracker-{{ checksum "Gemfile.lock" }}
          paths:
            - ./services/app/vendor/bundle

      # Only necessary if app uses webpacker or yarn in some other way
      - restore_cache:
          keys:
            - time-tracker-{{ checksum "yarn.lock" }}
            - time-tracker-

      - run:
          name: Yarn install
          command: yarn install --cache-folder ~/.cache/yarn

      - restore_cache:
          name: Restore Code Climate cache
          key: v1-code-climate-0.1.4

      - run:
          name: Install Code Climate Test Reporter
          command: |
            if [[ ! -x cc-test-reporter ]]
            then
              curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-0.1.4-linux-amd64 > ./cc-test-reporter
              chmod +x ./cc-test-reporter
            fi

      - save_cache:
          name: Save Code Climate cache
          key: v1-code-climate-0.1.4
          paths:
            - ./cc-test-reporter

      # Store yarn / webpacker cache
      - save_cache:
          key: time-tracker-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Setup the database
          command: bin/rails db:create db:migrate db:seed

      - run:
          name: Run linter check
          command: bundle exec rubocop

      - run:
          name: Run the tests
          command: bin/rake db:test:prepare && bin/rails test -d

      - run:
          name: Report code coverage to Code Climate
          command: |
            ./cc-test-reporter after-build -t simplecov --exit-code $? || true
